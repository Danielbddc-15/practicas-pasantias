{"ast":null,"code":"import axios from 'axios';\n\n// Configuración base de Axios\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Crear instancia de axios con configuración base\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 segundos timeout\n});\n\n// Interceptor para agregar token automáticamente a las requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas y errores globalmente\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Si el token es inválido o expiró, redirigir al login\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Servicios de autenticación\nexport const authAPI = {\n  // Registrar nuevo usuario\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message;\n    }\n  },\n  // Iniciar sesión\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  // Obtener perfil del usuario\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  // Actualizar perfil\n  updateProfile: async profileData => {\n    try {\n      const response = await api.put('/auth/profile', profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n    }\n  },\n  // Cerrar sesión\n  logout: async () => {\n    try {\n      const response = await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      // Aún si falla la request, limpiar el localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  }\n};\n\n// Servicios de tareas\nexport const tasksAPI = {\n  // Obtener tareas del usuario\n  getTasks: async (params = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      Object.keys(params).forEach(key => {\n        if (params[key] !== undefined && params[key] !== null) {\n          queryParams.append(key, params[key]);\n        }\n      });\n      const response = await api.get(`/tasks?${queryParams}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  },\n  // Obtener todas las tareas (admin)\n  getAllTasks: async (params = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      Object.keys(params).forEach(key => {\n        if (params[key] !== undefined && params[key] !== null) {\n          queryParams.append(key, params[key]);\n        }\n      });\n      const response = await api.get(`/tasks/all?${queryParams}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message;\n    }\n  },\n  // Obtener tarea por ID\n  getTask: async id => {\n    try {\n      const response = await api.get(`/tasks/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message;\n    }\n  },\n  // Crear nueva tarea\n  createTask: async taskData => {\n    try {\n      const response = await api.post('/tasks', taskData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message;\n    }\n  },\n  // Actualizar tarea completa\n  updateTask: async (id, taskData) => {\n    try {\n      const response = await api.put(`/tasks/${id}`, taskData);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  // Actualizar tarea parcialmente\n  patchTask: async (id, taskData) => {\n    try {\n      const response = await api.patch(`/tasks/${id}`, taskData);\n      return response.data;\n    } catch (error) {\n      var _error$response11;\n      throw ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message;\n    }\n  },\n  // Eliminar tarea\n  deleteTask: async id => {\n    try {\n      const response = await api.delete(`/tasks/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response12;\n      throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error.message;\n    }\n  },\n  // Alternar estado completado\n  toggleTask: async id => {\n    try {\n      const response = await api.post(`/tasks/${id}/toggle`);\n      return response.data;\n    } catch (error) {\n      var _error$response13;\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  }\n};\n\n// Función helper para manejar errores de API\nexport const handleAPIError = error => {\n  if (error.details && Array.isArray(error.details)) {\n    // Errores de validación\n    return error.details.map(detail => detail.msg).join(', ');\n  } else if (error.message) {\n    return error.message;\n  } else if (typeof error === 'string') {\n    return error;\n  } else {\n    return 'Error desconocido del servidor';\n  }\n};\n\n// Helper para verificar si el usuario está autenticado\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\n\n// Helper para obtener información del usuario del localStorage\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    try {\n      return JSON.parse(userStr);\n    } catch (error) {\n      console.error('Error parsing user data from localStorage:', error);\n      return null;\n    }\n  }\n  return null;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","authAPI","register","userData","post","data","_error$response3","message","login","credentials","_error$response4","getProfile","get","_error$response5","updateProfile","profileData","put","_error$response6","logout","_error$response7","tasksAPI","getTasks","params","queryParams","URLSearchParams","Object","keys","forEach","key","undefined","append","_error$response8","getAllTasks","_error$response9","getTask","id","_error$response0","createTask","taskData","_error$response1","updateTask","_error$response10","patchTask","patch","_error$response11","deleteTask","delete","_error$response12","toggleTask","_error$response13","handleAPIError","details","Array","isArray","map","detail","msg","join","isAuthenticated","getCurrentUser","userStr","JSON","parse","console"],"sources":["C:/Users/admin/Desktop/Ejercicio 1 CRUD/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuración base de Axios\r\nconst API_BASE_URL = 'http://localhost:3000/api';\r\n\r\n// Crear instancia de axios con configuración base\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000, // 10 segundos timeout\r\n});\r\n\r\n// Interceptor para agregar token automáticamente a las requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para manejar respuestas y errores globalmente\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Si el token es inválido o expiró, redirigir al login\r\n    if (error.response?.status === 401 || error.response?.status === 403) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Servicios de autenticación\r\nexport const authAPI = {\r\n  // Registrar nuevo usuario\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Iniciar sesión\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login', credentials);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Obtener perfil del usuario\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Actualizar perfil\r\n  updateProfile: async (profileData) => {\r\n    try {\r\n      const response = await api.put('/auth/profile', profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Cerrar sesión\r\n  logout: async () => {\r\n    try {\r\n      const response = await api.post('/auth/logout');\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Aún si falla la request, limpiar el localStorage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      throw error.response?.data || error.message;\r\n    }\r\n  }\r\n};\r\n\r\n// Servicios de tareas\r\nexport const tasksAPI = {\r\n  // Obtener tareas del usuario\r\n  getTasks: async (params = {}) => {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      Object.keys(params).forEach(key => {\r\n        if (params[key] !== undefined && params[key] !== null) {\r\n          queryParams.append(key, params[key]);\r\n        }\r\n      });\r\n      \r\n      const response = await api.get(`/tasks?${queryParams}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Obtener todas las tareas (admin)\r\n  getAllTasks: async (params = {}) => {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      Object.keys(params).forEach(key => {\r\n        if (params[key] !== undefined && params[key] !== null) {\r\n          queryParams.append(key, params[key]);\r\n        }\r\n      });\r\n      \r\n      const response = await api.get(`/tasks/all?${queryParams}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Obtener tarea por ID\r\n  getTask: async (id) => {\r\n    try {\r\n      const response = await api.get(`/tasks/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Crear nueva tarea\r\n  createTask: async (taskData) => {\r\n    try {\r\n      const response = await api.post('/tasks', taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Actualizar tarea completa\r\n  updateTask: async (id, taskData) => {\r\n    try {\r\n      const response = await api.put(`/tasks/${id}`, taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Actualizar tarea parcialmente\r\n  patchTask: async (id, taskData) => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${id}`, taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Eliminar tarea\r\n  deleteTask: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/tasks/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Alternar estado completado\r\n  toggleTask: async (id) => {\r\n    try {\r\n      const response = await api.post(`/tasks/${id}/toggle`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  }\r\n};\r\n\r\n// Función helper para manejar errores de API\r\nexport const handleAPIError = (error) => {\r\n  if (error.details && Array.isArray(error.details)) {\r\n    // Errores de validación\r\n    return error.details.map(detail => detail.msg).join(', ');\r\n  } else if (error.message) {\r\n    return error.message;\r\n  } else if (typeof error === 'string') {\r\n    return error;\r\n  } else {\r\n    return 'Error desconocido del servidor';\r\n  }\r\n};\r\n\r\n// Helper para verificar si el usuario está autenticado\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};\r\n\r\n// Helper para obtener información del usuario del localStorage\r\nexport const getCurrentUser = () => {\r\n  const userStr = localStorage.getItem('user');\r\n  if (userStr) {\r\n    try {\r\n      return JSON.parse(userStr);\r\n    } catch (error) {\r\n      console.error('Error parsing user data from localStorage:', error);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACT;EACA,IAAI,EAAAD,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,EAAAD,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IACpET,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAEA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMW,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;MAC3D,OAAOV,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAgB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAhB,KAAK,CAACG,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBD,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,IAAI,CAAC,aAAa,EAAEK,WAAW,CAAC;MAC3D,OAAOhB,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAoB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAApB,KAAK,CAACG,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAI,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMhB,GAAG,CAACmC,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOnB,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAuB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAvB,KAAK,CAACG,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAO,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMhB,GAAG,CAACuC,GAAG,CAAC,eAAe,EAAED,WAAW,CAAC;MAC5D,OAAOtB,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA2B,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAA3B,KAAK,CAACG,QAAQ,cAAAwB,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAW,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,IAAI,CAAC,cAAc,CAAC;MAC/CjB,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MAC/B,OAAOJ,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA6B,gBAAA;MACd;MACAhC,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MAC/B,MAAM,EAAAsB,gBAAA,GAAA7B,KAAK,CAACG,QAAQ,cAAA0B,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,QAAQ,GAAG;EACtB;EACAC,QAAQ,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC/B,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MACzCC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;QACjC,IAAIN,MAAM,CAACM,GAAG,CAAC,KAAKC,SAAS,IAAIP,MAAM,CAACM,GAAG,CAAC,KAAK,IAAI,EAAE;UACrDL,WAAW,CAACO,MAAM,CAACF,GAAG,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,MAAMnC,QAAQ,GAAG,MAAMhB,GAAG,CAACmC,GAAG,CAAC,UAAUW,WAAW,EAAE,CAAC;MACvD,OAAO9B,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAyC,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAzC,KAAK,CAACG,QAAQ,cAAAsC,gBAAA,uBAAdA,gBAAA,CAAgB1B,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAyB,WAAW,EAAE,MAAAA,CAAOV,MAAM,GAAG,CAAC,CAAC,KAAK;IAClC,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MACzCC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;QACjC,IAAIN,MAAM,CAACM,GAAG,CAAC,KAAKC,SAAS,IAAIP,MAAM,CAACM,GAAG,CAAC,KAAK,IAAI,EAAE;UACrDL,WAAW,CAACO,MAAM,CAACF,GAAG,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,MAAMnC,QAAQ,GAAG,MAAMhB,GAAG,CAACmC,GAAG,CAAC,cAAcW,WAAW,EAAE,CAAC;MAC3D,OAAO9B,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA2C,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAA3C,KAAK,CAACG,QAAQ,cAAAwC,gBAAA,uBAAdA,gBAAA,CAAgB5B,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACA2B,OAAO,EAAE,MAAOC,EAAE,IAAK;IACrB,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMhB,GAAG,CAACmC,GAAG,CAAC,UAAUuB,EAAE,EAAE,CAAC;MAC9C,OAAO1C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA8C,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAA9C,KAAK,CAACG,QAAQ,cAAA2C,gBAAA,uBAAdA,gBAAA,CAAgB/B,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACA8B,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAM7C,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,IAAI,CAAC,QAAQ,EAAEkC,QAAQ,CAAC;MACnD,OAAO7C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAiD,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAjD,KAAK,CAACG,QAAQ,cAAA8C,gBAAA,uBAAdA,gBAAA,CAAgBlC,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAiC,UAAU,EAAE,MAAAA,CAAOL,EAAE,EAAEG,QAAQ,KAAK;IAClC,IAAI;MACF,MAAM7C,QAAQ,GAAG,MAAMhB,GAAG,CAACuC,GAAG,CAAC,UAAUmB,EAAE,EAAE,EAAEG,QAAQ,CAAC;MACxD,OAAO7C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAmD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAnD,KAAK,CAACG,QAAQ,cAAAgD,iBAAA,uBAAdA,iBAAA,CAAgBpC,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAmC,SAAS,EAAE,MAAAA,CAAOP,EAAE,EAAEG,QAAQ,KAAK;IACjC,IAAI;MACF,MAAM7C,QAAQ,GAAG,MAAMhB,GAAG,CAACkE,KAAK,CAAC,UAAUR,EAAE,EAAE,EAAEG,QAAQ,CAAC;MAC1D,OAAO7C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAsD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAtD,KAAK,CAACG,QAAQ,cAAAmD,iBAAA,uBAAdA,iBAAA,CAAgBvC,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAsC,UAAU,EAAE,MAAOV,EAAE,IAAK;IACxB,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMhB,GAAG,CAACqE,MAAM,CAAC,UAAUX,EAAE,EAAE,CAAC;MACjD,OAAO1C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAAyD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAzD,KAAK,CAACG,QAAQ,cAAAsD,iBAAA,uBAAdA,iBAAA,CAAgB1C,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF,CAAC;EAED;EACAyC,UAAU,EAAE,MAAOb,EAAE,IAAK;IACxB,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,IAAI,CAAC,UAAU+B,EAAE,SAAS,CAAC;MACtD,OAAO1C,QAAQ,CAACY,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MAAA,IAAA2D,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA3D,KAAK,CAACG,QAAQ,cAAAwD,iBAAA,uBAAdA,iBAAA,CAAgB5C,IAAI,KAAIf,KAAK,CAACiB,OAAO;IAC7C;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM2C,cAAc,GAAI5D,KAAK,IAAK;EACvC,IAAIA,KAAK,CAAC6D,OAAO,IAAIC,KAAK,CAACC,OAAO,CAAC/D,KAAK,CAAC6D,OAAO,CAAC,EAAE;IACjD;IACA,OAAO7D,KAAK,CAAC6D,OAAO,CAACG,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC3D,CAAC,MAAM,IAAInE,KAAK,CAACiB,OAAO,EAAE;IACxB,OAAOjB,KAAK,CAACiB,OAAO;EACtB,CAAC,MAAM,IAAI,OAAOjB,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOA,KAAK;EACd,CAAC,MAAM;IACL,OAAO,gCAAgC;EACzC;AACF,CAAC;;AAED;AACA,OAAO,MAAMoE,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMxE,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAACF,KAAK;AAChB,CAAC;;AAED;AACA,OAAO,MAAMyE,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,OAAO,GAAGzE,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC5C,IAAIwE,OAAO,EAAE;IACX,IAAI;MACF,OAAOC,IAAI,CAACC,KAAK,CAACF,OAAO,CAAC;IAC5B,CAAC,CAAC,OAAOtE,KAAK,EAAE;MACdyE,OAAO,CAACzE,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO,IAAI;IACb;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}