import React, { useState, useEffect } from 'react';
import { useLanguage } from '../shared/LanguageContext';
import { useAuth } from '../shared/AuthContext';
import { Product, ProductService } from '../shared/ProductService';
import './CrudProductos.css';
    localStorage.setItem(`${this.baseKey}${userId}`, JSON.stringify(updatedProducts));
  }
}

const CrudProductos: React.FC = () => {
  const { t } = useLanguage();
  const { user } = useAuth();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isFormVisible, setIsFormVisible] = useState(false);
  
  const [formData, setFormData] = useState({
    name: '',
    price: 0,
    description: '',
    photo: ''
  });

  // Cargar productos al montar el componente
  useEffect(() => {
    loadProducts();
  }, [user]);

  const loadProducts = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      const userProducts = await ProductAPI.getProducts(user.id);
      setProducts(userProducts);
    } catch (error) {
      console.error('Error loading products:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateProduct = async () => {
    if (!user || !formData.name || !formData.description) {
      alert(t('fillAllFields'));
      return;
    }

    setLoading(true);
    try {
      const newProduct = await ProductAPI.createProduct({
        ...formData,
        userId: user.id
      });
      setProducts(prev => [...prev, newProduct]);
      resetForm();
      alert(t('productAdded'));
    } catch (error) {
      console.error('Error creating product:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateProduct = async () => {
    if (!user || !editingProduct || !formData.name || !formData.description) {
      alert(t('fillAllFields'));
      return;
    }

    setLoading(true);
    try {
      const updatedProduct = await ProductAPI.updateProduct({
        ...editingProduct,
        ...formData
      });
      setProducts(prev => prev.map(p => 
        p.id === updatedProduct.id ? updatedProduct : p
      ));
      resetForm();
      alert(t('productUpdated'));
    } catch (error) {
      console.error('Error updating product:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteProduct = async (productId: number) => {
    if (!user || !window.confirm(t('deleteProduct') + '?')) return;

    setLoading(true);
    try {
      await ProductAPI.deleteProduct(productId, user.id);
      setProducts(prev => prev.filter(p => p.id !== productId));
      alert(t('productDeleted'));
    } catch (error) {
      console.error('Error deleting product:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (product: Product) => {
    setEditingProduct(product);
    setFormData({
      name: product.name,
      price: product.price,
      description: product.description,
      photo: product.photo
    });
    setIsFormVisible(true);
  };

  const handlePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const result = event.target?.result as string;
        setFormData(prev => ({ ...prev, photo: result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const resetForm = () => {
    setFormData({ name: '', price: 0, description: '', photo: '' });
    setEditingProduct(null);
    setIsFormVisible(false);
  };

  return (
    <div className="crud-productos">
      <div className="crud-header">
        <h2>üè™ {t('productManagement')} - CRUD</h2>
        <button
          onClick={() => setIsFormVisible(true)}
          className="add-btn"
          disabled={loading}
        >
          ‚ûï {t('addProduct')}
        </button>
      </div>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">‚è≥ {t('loading')}</div>
        </div>
      )}

      {isFormVisible && (
        <div className="product-form-modal">
          <div className="modal-content">
            <h3>{editingProduct ? t('editProduct') : t('addProduct')}</h3>
            
            <div className="form-group">
              <label>{t('name')} *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                disabled={loading}
              />
            </div>

            <div className="form-group">
              <label>{t('price')}</label>
              <input
                type="number"
                step="0.01"
                value={formData.price || ''}
                onChange={(e) => setFormData({...formData, price: parseFloat(e.target.value) || 0})}
                disabled={loading}
              />
            </div>

            <div className="form-group">
              <label>{t('description')} *</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                disabled={loading}
              />
            </div>

            <div className="form-group">
              <label>{t('photo')}</label>
              <input
                type="file"
                accept="image/*"
                onChange={handlePhotoUpload}
                disabled={loading}
              />
              {formData.photo && (
                <div className="photo-preview">
                  <img src={formData.photo} alt="Preview" />
                </div>
              )}
            </div>

            <div className="form-actions">
              <button
                onClick={editingProduct ? handleUpdateProduct : handleCreateProduct}
                className="save-btn"
                disabled={loading}
              >
                {t('save')}
              </button>
              <button
                onClick={resetForm}
                className="cancel-btn"
                disabled={loading}
              >
                {t('cancel')}
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="products-container">
        {products.length === 0 ? (
          <div className="no-products">
            <p>{t('noProducts')}</p>
            <p>Los productos se cargan desde el "servidor" y se mantienen por usuario.</p>
          </div>
        ) : (
          <div className="products-table">
            <div className="table-header">
              <span>{t('photo')}</span>
              <span>{t('name')}</span>
              <span>{t('price')}</span>
              <span>{t('description')}</span>
              <span>Acciones</span>
            </div>
            {products.map(product => (
              <div key={product.id} className="table-row">
                <div className="product-photo-cell">
                  {product.photo ? (
                    <img src={product.photo} alt={product.name} />
                  ) : (
                    <div className="no-photo">üì∑</div>
                  )}
                </div>
                <span className="product-name">{product.name}</span>
                <span className="product-price">${product.price}</span>
                <span className="product-description">{product.description}</span>
                <div className="table-actions">
                  <button
                    onClick={() => handleEditClick(product)}
                    className="edit-btn"
                    disabled={loading}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    onClick={() => handleDeleteProduct(product.id)}
                    className="delete-btn"
                    disabled={loading}
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CrudProductos;